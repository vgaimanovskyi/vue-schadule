/**
  Do not include any files here which will have actual css output,
  otherwise our bundle file size will grow rapidly as the output will be in every file!
*/

@mixin flexCentered() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin transformCentered() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin cross($size: 60%, $color: #fff, $stroke: 1.5px) {
  &:before, &:after {
    content: '';
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -$stroke/2;
    margin-top: -$size/2;

    transform-origin: center;
    width: $stroke;
    height: $size;
    background-color: $color;
    border-radius: $stroke;
  }

  &:before {
    transform: rotate(-45deg);
  }

  &:after {
    transform: rotate(45deg);
  }
}

@mixin triangle($side,$color,$size) {
  @if $side == left {
    border: $size solid transparent;
    border-right: $size solid $color;
  }
  @if $side == right {
    border: $size solid transparent;
    border-left: $size solid $color;
  }
  @if $side == top {
    border: $size solid transparent;
    border-bottom: $size solid $color;
  }
  @if $side == bottom {
    border: $size solid transparent;
    border-top: $size solid $color;
  }
}

@mixin triangle_narrow($side,$color,$size) {
  $narrow_size: $size/2;
  @if $side == left {
    border: $narrow_size solid transparent;
    border-right: $size solid $color;
  }
  @if $side == right {
    border: $narrow_size solid transparent;
    border-left: $size solid $color;
  }
  @if $side == top {
    border: $narrow_size solid transparent;
    border-bottom: $size solid $color;
  }
  @if $side == bottom {
    border: $narrow_size solid transparent;
    border-top: $size solid $color;
  }
}

@mixin arrow($direction,$color:#000,$width:1rem,$arrow_width:.1rem) {
  width: $width;
  height: $width;
  transform: rotate(45deg);

  @if $direction == right {
    border-top: $arrow_width solid $color;
    border-right: $arrow_width solid $color;
    border-bottom: 0;
    border-left: 0;
  }
  @if $direction == bottom {
    border-right: $arrow_width solid $color;
    border-bottom: $arrow_width solid $color;
    border-top: 0;
    border-left: 0;
  }
  @if $direction == left {
    border-bottom: $arrow_width solid $color;
    border-left: $arrow_width solid $color;
    border-top: 0;
    border-right: 0;
  }
  @if $direction == top {
    border-left: $arrow_width solid $color;
    border-top: $arrow_width solid $color;
    border-bottom: 0;
    border-right: 0;
  }
}

@mixin overlay($color) {
  position: relative;
  z-index: 0;

  &:before {
    content: "";
    z-index: -1;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 100vw;
    height: 100%;
    margin: 0 0 0 (-50vw);
    background: $color;
  }
}

@mixin dashed-border($dashlength, $spacelength, $borderwidth, $color) {
  $per: percentage($dashlength / ($dashlength + $spacelength));
  background-image: linear-gradient(to right, $color 0%, $color $per, rgba(0, 0, 0, 0) $per),
  linear-gradient(to bottom, $color 0%, $color $per, rgba(0, 0, 0, 0) $per),
  linear-gradient(to right, $color 0%, $color $per, rgba(0, 0, 0, 0) $per),
  linear-gradient(to bottom, $color 0%, $color $per, rgba(0, 0, 0, 0) $per);
  background-position: (-$spacelength) 0, 0 (-$spacelength), (-$spacelength) 100%, 100% (-$spacelength);
  background-size: ($dashlength + $spacelength) $borderwidth, $borderwidth ($dashlength + $spacelength), ($dashlength + $spacelength) $borderwidth, $borderwidth ($dashlength + $spacelength);
  background-repeat: repeat-x, repeat-y, repeat-x, repeat-y;
}

@mixin list-dotted($size: 8px, $color: inherit) {
  > * {
    position: relative;
    margin-left: $size * 4;

    &:before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      transform: translate(-$size * 3, -50%);

      width: $size;
      height: $size;

      border-radius: 50%;
      background-color: $color;
    }
  }
}
